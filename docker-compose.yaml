networks:
  global-net:
    driver: bridge

x-broker-common-env: &common-env
  KAFKA_PROCESS_ROLES: broker,controller
  KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:9093,2@broker2:9093,3@broker3:9093
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  CLUSTER_ID: 8cQAdE44QTWV_0HLozHOOQ 
  KAFKA_LOG_DIRS: /tmp/kafka/data

services:
  broker1:
    image: apache/kafka:latest
    hostname: broker1
    container_name: broker1
    healthcheck:
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 10
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server broker1:9092 || exit 1
    environment:
      <<: *common-env 
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://broker1:9092,CONTROLLER://broker1:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092
    volumes:
      - ./broker1/data:/tmp/kafka/data
    networks:
      - global-net

  broker2:
    image: apache/kafka:latest
    hostname: broker2
    container_name: broker2
    healthcheck:
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 10
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server broker2:9092 || exit 1
    environment:
      <<: *common-env
      KAFKA_NODE_ID: 2
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: PLAINTEXT://broker2:9092,CONTROLLER://broker2:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9092
    volumes:
      - ./broker2/data:/tmp/kafka/data
    networks:
      - global-net

  broker3:
    image: apache/kafka:latest
    hostname: broker3
    container_name: broker3
    healthcheck:
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 10
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server broker3:9092 || exit 1
    environment:
      <<: *common-env
      KAFKA_NODE_ID: 3
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENERS: PLAINTEXT://broker3:9092,CONTROLLER://broker3:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9092
    volumes:
      - ./broker3/data:/tmp/kafka/data
    networks:
      - global-net

  s3proxy:
    image: andrewgaul/s3proxy:latest
    container_name: s3proxy
    hostname: s3proxy
    environment:
      S3PROXY_ENDPOINT: http://0.0.0.0:8080
      S3PROXY_AUTHORIZATION: none
      JCLOUDS_PROVIDER: filesystem-nio2
      JCLOUDS_FILESYSTEM_BASEDIR: /data
    ports:
      - 9000:8080
    volumes:
      - ./s3-data:/data
    networks:
      - global-net

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schemaregistry
    ports:
      - 8085:8085
    healthcheck:
      start_period: 5s
      interval: 10s
      retries: 10
      test: curl --fail --silent --insecure http://schemaregistry:8085/subjects --output /dev/null || exit 1
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker1:9092,broker2:9092,broker3:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy  
      broker3:
        condition: service_healthy
    networks:
      - global-net

  topic-creator:
    build: ./docker/topic_creator
    image: topic-creator
    container_name: topic-creator
    hostname: topiccreator
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy  
      broker3:
        condition: service_healthy
    networks:
      - global-net
  producer:
    build: 
      dockerfile: docker/producer/dockerfile
      context: .
    image: producer
    container_name: producer-service
    hostname: producer 
    depends_on:
      topic-creator:
        condition: service_completed_successfully
      schema-registry:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: broker1:9092,broker2:9092,broker3:9092
      RESULTS_PATH: producer-results
      NODE_ID_LIST: node1,node2
      INTERVAL_METRICS: 1
      LAMBDA_LOGS: 100
    volumes:
      - ./producer-results:/results
    networks:
      - global-net

  worker1:
    build: ./docker/worker/. 
    image: worker
    container_name: worker1
    hostname: worker1
    healthcheck:
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 10
      test: curl --fail --silent --insecure http://worker1:8083/connectors --output /dev/null || exit 1
    ports:
      - 8083:8083
    environment:
      CONNECT_REST_ADVERTISED_HOST_NAME: worker1
      CONNECT_REST_PORT: 8083
      CONNECT_BOOTSTRAP_SERVERS: broker1:9092,broker2:9092,broker3:9092
      CONNECT_GROUP_ID: s3-sink-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
      CONNECT_PLUGIN_PATH: usr/share/java,/usr/share/confluent-hub-components/
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy  
      broker3:
        condition: service_healthy
      s3proxy:
        condition: service_started
    networks:
      - global-net
  
  connectors-creator:
    build: ./docker/connectors_creator/. 
    image: connector-creator
    container_name: connector-creator
    depends_on:
      worker1:
        condition: service_healthy
    networks:
      - global-net
  

